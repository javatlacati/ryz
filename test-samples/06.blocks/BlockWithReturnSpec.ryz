/*
className: blocks.BlockWithReturn
classFile: blocks/BlockWithReturn.class
otherClasses: blocks/BlockWithReturn$1.class, blocks/BlockWithReturn$2.class
extends: java.lang.Object
implements: 
attributes: private-instance list: java.util.List
methods:  public-instance testBlockWithReturn : void
behavior: invokestatic main([Ljava.lang.String;) | stdout=1%n2%n3%n
*/
import ( java.util.* )
blocks.BlockWithReturn {

    list : List = ArrayList(Arrays.asList("1","2","3"))

    testBlockWithReturn() {
        cond = () : Boolean {
            list.size() .> ( 0 )
        }
        action = {
            out.println( list.remove(0) )
        }
        whileTrue( cond , action )
        /* same as: 
        whileTrue(():Boolean{ list.size() .> ( 0 ) }, {
            out.println( list.remove( 0 ) )
        })
        TODO: work on return type inference to have:
        whileTrue({list.size() .> ( 0 ) }, {
          list.remove(0)
        })
        */
    }
    main() {
        testBlockWithReturn()
    }
}
